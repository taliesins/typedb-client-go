// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: v1/protobuf/console.proto

package grakn_protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KGMSConsoleClient is the client API for KGMSConsole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KGMSConsoleClient interface {
	UserManagement(ctx context.Context, opts ...grpc.CallOption) (KGMSConsole_UserManagementClient, error)
}

type kGMSConsoleClient struct {
	cc grpc.ClientConnInterface
}

func NewKGMSConsoleClient(cc grpc.ClientConnInterface) KGMSConsoleClient {
	return &kGMSConsoleClient{cc}
}

func (c *kGMSConsoleClient) UserManagement(ctx context.Context, opts ...grpc.CallOption) (KGMSConsole_UserManagementClient, error) {
	stream, err := c.cc.NewStream(ctx, &KGMSConsole_ServiceDesc.Streams[0], "/KGMSConsole/UserManagement", opts...)
	if err != nil {
		return nil, err
	}
	x := &kGMSConsoleUserManagementClient{stream}
	return x, nil
}

type KGMSConsole_UserManagementClient interface {
	Send(*UserManagement_Req) error
	Recv() (*UserManagement_Res, error)
	grpc.ClientStream
}

type kGMSConsoleUserManagementClient struct {
	grpc.ClientStream
}

func (x *kGMSConsoleUserManagementClient) Send(m *UserManagement_Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kGMSConsoleUserManagementClient) Recv() (*UserManagement_Res, error) {
	m := new(UserManagement_Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KGMSConsoleServer is the server API for KGMSConsole service.
// All implementations must embed UnimplementedKGMSConsoleServer
// for forward compatibility
type KGMSConsoleServer interface {
	UserManagement(KGMSConsole_UserManagementServer) error
	mustEmbedUnimplementedKGMSConsoleServer()
}

// UnimplementedKGMSConsoleServer must be embedded to have forward compatible implementations.
type UnimplementedKGMSConsoleServer struct {
}

func (UnimplementedKGMSConsoleServer) UserManagement(KGMSConsole_UserManagementServer) error {
	return status.Errorf(codes.Unimplemented, "method UserManagement not implemented")
}
func (UnimplementedKGMSConsoleServer) mustEmbedUnimplementedKGMSConsoleServer() {}

// UnsafeKGMSConsoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KGMSConsoleServer will
// result in compilation errors.
type UnsafeKGMSConsoleServer interface {
	mustEmbedUnimplementedKGMSConsoleServer()
}

func RegisterKGMSConsoleServer(s grpc.ServiceRegistrar, srv KGMSConsoleServer) {
	s.RegisterService(&KGMSConsole_ServiceDesc, srv)
}

func _KGMSConsole_UserManagement_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KGMSConsoleServer).UserManagement(&kGMSConsoleUserManagementServer{stream})
}

type KGMSConsole_UserManagementServer interface {
	Send(*UserManagement_Res) error
	Recv() (*UserManagement_Req, error)
	grpc.ServerStream
}

type kGMSConsoleUserManagementServer struct {
	grpc.ServerStream
}

func (x *kGMSConsoleUserManagementServer) Send(m *UserManagement_Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kGMSConsoleUserManagementServer) Recv() (*UserManagement_Req, error) {
	m := new(UserManagement_Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KGMSConsole_ServiceDesc is the grpc.ServiceDesc for KGMSConsole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KGMSConsole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KGMSConsole",
	HandlerType: (*KGMSConsoleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserManagement",
			Handler:       _KGMSConsole_UserManagement_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/protobuf/console.proto",
}
