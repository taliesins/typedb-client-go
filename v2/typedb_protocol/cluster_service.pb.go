//
// Copyright (C) 2022 Vaticle
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: v2/protobuf/cluster/cluster_service.proto

package typedb_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_v2_protobuf_cluster_cluster_service_proto protoreflect.FileDescriptor

var file_v2_protobuf_cluster_cluster_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x28, 0x76, 0x32,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xd0, 0x09, 0x0a, 0x0d, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x26, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x30, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x1a,
	0x30, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x12, 0x6e, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x1a, 0x2e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x12, 0x6e, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x2e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x1a, 0x2e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x12, 0x65, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x2b,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x33,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x2e,
	0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x5f, 0x67, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x12,
	0x78, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x2f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x42, 0x5b, 0x0a,
	0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x61, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x13, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x24, 0x2e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x64, 0x62, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_v2_protobuf_cluster_cluster_service_proto_goTypes = []interface{}{
	(*ServerManager_All_Req)(nil),              // 0: typedb.protocol.ServerManager.All.Req
	(*ClusterUserManager_Contains_Req)(nil),    // 1: typedb.protocol.ClusterUserManager.Contains.Req
	(*ClusterUserManager_Create_Req)(nil),      // 2: typedb.protocol.ClusterUserManager.Create.Req
	(*ClusterUserManager_Delete_Req)(nil),      // 3: typedb.protocol.ClusterUserManager.Delete.Req
	(*ClusterUserManager_All_Req)(nil),         // 4: typedb.protocol.ClusterUserManager.All.Req
	(*ClusterUserManager_PasswordSet_Req)(nil), // 5: typedb.protocol.ClusterUserManager.PasswordSet.Req
	(*ClusterUserManager_Get_Req)(nil),         // 6: typedb.protocol.ClusterUserManager.Get.Req
	(*ClusterUser_PasswordUpdate_Req)(nil),     // 7: typedb.protocol.ClusterUser.PasswordUpdate.Req
	(*ClusterUser_Token_Req)(nil),              // 8: typedb.protocol.ClusterUser.Token.Req
	(*ClusterDatabaseManager_Get_Req)(nil),     // 9: typedb.protocol.ClusterDatabaseManager.Get.Req
	(*ClusterDatabaseManager_All_Req)(nil),     // 10: typedb.protocol.ClusterDatabaseManager.All.Req
	(*ServerManager_All_Res)(nil),              // 11: typedb.protocol.ServerManager.All.Res
	(*ClusterUserManager_Contains_Res)(nil),    // 12: typedb.protocol.ClusterUserManager.Contains.Res
	(*ClusterUserManager_Create_Res)(nil),      // 13: typedb.protocol.ClusterUserManager.Create.Res
	(*ClusterUserManager_Delete_Res)(nil),      // 14: typedb.protocol.ClusterUserManager.Delete.Res
	(*ClusterUserManager_All_Res)(nil),         // 15: typedb.protocol.ClusterUserManager.All.Res
	(*ClusterUserManager_PasswordSet_Res)(nil), // 16: typedb.protocol.ClusterUserManager.PasswordSet.Res
	(*ClusterUserManager_Get_Res)(nil),         // 17: typedb.protocol.ClusterUserManager.Get.Res
	(*ClusterUser_PasswordUpdate_Res)(nil),     // 18: typedb.protocol.ClusterUser.PasswordUpdate.Res
	(*ClusterUser_Token_Res)(nil),              // 19: typedb.protocol.ClusterUser.Token.Res
	(*ClusterDatabaseManager_Get_Res)(nil),     // 20: typedb.protocol.ClusterDatabaseManager.Get.Res
	(*ClusterDatabaseManager_All_Res)(nil),     // 21: typedb.protocol.ClusterDatabaseManager.All.Res
}
var file_v2_protobuf_cluster_cluster_service_proto_depIdxs = []int32{
	0,  // 0: typedb.protocol.TypeDBCluster.servers_all:input_type -> typedb.protocol.ServerManager.All.Req
	1,  // 1: typedb.protocol.TypeDBCluster.users_contains:input_type -> typedb.protocol.ClusterUserManager.Contains.Req
	2,  // 2: typedb.protocol.TypeDBCluster.users_create:input_type -> typedb.protocol.ClusterUserManager.Create.Req
	3,  // 3: typedb.protocol.TypeDBCluster.users_delete:input_type -> typedb.protocol.ClusterUserManager.Delete.Req
	4,  // 4: typedb.protocol.TypeDBCluster.users_all:input_type -> typedb.protocol.ClusterUserManager.All.Req
	5,  // 5: typedb.protocol.TypeDBCluster.users_password_set:input_type -> typedb.protocol.ClusterUserManager.PasswordSet.Req
	6,  // 6: typedb.protocol.TypeDBCluster.users_get:input_type -> typedb.protocol.ClusterUserManager.Get.Req
	7,  // 7: typedb.protocol.TypeDBCluster.user_password_update:input_type -> typedb.protocol.ClusterUser.PasswordUpdate.Req
	8,  // 8: typedb.protocol.TypeDBCluster.user_token:input_type -> typedb.protocol.ClusterUser.Token.Req
	9,  // 9: typedb.protocol.TypeDBCluster.databases_get:input_type -> typedb.protocol.ClusterDatabaseManager.Get.Req
	10, // 10: typedb.protocol.TypeDBCluster.databases_all:input_type -> typedb.protocol.ClusterDatabaseManager.All.Req
	11, // 11: typedb.protocol.TypeDBCluster.servers_all:output_type -> typedb.protocol.ServerManager.All.Res
	12, // 12: typedb.protocol.TypeDBCluster.users_contains:output_type -> typedb.protocol.ClusterUserManager.Contains.Res
	13, // 13: typedb.protocol.TypeDBCluster.users_create:output_type -> typedb.protocol.ClusterUserManager.Create.Res
	14, // 14: typedb.protocol.TypeDBCluster.users_delete:output_type -> typedb.protocol.ClusterUserManager.Delete.Res
	15, // 15: typedb.protocol.TypeDBCluster.users_all:output_type -> typedb.protocol.ClusterUserManager.All.Res
	16, // 16: typedb.protocol.TypeDBCluster.users_password_set:output_type -> typedb.protocol.ClusterUserManager.PasswordSet.Res
	17, // 17: typedb.protocol.TypeDBCluster.users_get:output_type -> typedb.protocol.ClusterUserManager.Get.Res
	18, // 18: typedb.protocol.TypeDBCluster.user_password_update:output_type -> typedb.protocol.ClusterUser.PasswordUpdate.Res
	19, // 19: typedb.protocol.TypeDBCluster.user_token:output_type -> typedb.protocol.ClusterUser.Token.Res
	20, // 20: typedb.protocol.TypeDBCluster.databases_get:output_type -> typedb.protocol.ClusterDatabaseManager.Get.Res
	21, // 21: typedb.protocol.TypeDBCluster.databases_all:output_type -> typedb.protocol.ClusterDatabaseManager.All.Res
	11, // [11:22] is the sub-list for method output_type
	0,  // [0:11] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_v2_protobuf_cluster_cluster_service_proto_init() }
func file_v2_protobuf_cluster_cluster_service_proto_init() {
	if File_v2_protobuf_cluster_cluster_service_proto != nil {
		return
	}
	file_v2_protobuf_cluster_cluster_server_proto_init()
	file_v2_protobuf_cluster_cluster_user_proto_init()
	file_v2_protobuf_cluster_cluster_database_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v2_protobuf_cluster_cluster_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v2_protobuf_cluster_cluster_service_proto_goTypes,
		DependencyIndexes: file_v2_protobuf_cluster_cluster_service_proto_depIdxs,
	}.Build()
	File_v2_protobuf_cluster_cluster_service_proto = out.File
	file_v2_protobuf_cluster_cluster_service_proto_rawDesc = nil
	file_v2_protobuf_cluster_cluster_service_proto_goTypes = nil
	file_v2_protobuf_cluster_cluster_service_proto_depIdxs = nil
}
