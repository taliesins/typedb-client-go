// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: v2/protobuf/cluster/cluster_service.proto

package typedb_protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TypeDBClusterClient is the client API for TypeDBCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypeDBClusterClient interface {
	// Server Manager API
	ServersAll(ctx context.Context, in *ServerManager_All_Req, opts ...grpc.CallOption) (*ServerManager_All_Res, error)
	// User Manager API
	UsersContains(ctx context.Context, in *ClusterUserManager_Contains_Req, opts ...grpc.CallOption) (*ClusterUserManager_Contains_Res, error)
	UsersCreate(ctx context.Context, in *ClusterUserManager_Create_Req, opts ...grpc.CallOption) (*ClusterUserManager_Create_Res, error)
	UsersAll(ctx context.Context, in *ClusterUserManager_All_Req, opts ...grpc.CallOption) (*ClusterUserManager_All_Res, error)
	// User API
	UserPassword(ctx context.Context, in *ClusterUser_Password_Req, opts ...grpc.CallOption) (*ClusterUser_Password_Res, error)
	UserToken(ctx context.Context, in *ClusterUser_Token_Req, opts ...grpc.CallOption) (*ClusterUser_Token_Res, error)
	UserDelete(ctx context.Context, in *ClusterUser_Delete_Req, opts ...grpc.CallOption) (*ClusterUser_Delete_Res, error)
	// Database Manager API
	DatabasesGet(ctx context.Context, in *ClusterDatabaseManager_Get_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_Get_Res, error)
	DatabasesAll(ctx context.Context, in *ClusterDatabaseManager_All_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_All_Res, error)
}

type typeDBClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewTypeDBClusterClient(cc grpc.ClientConnInterface) TypeDBClusterClient {
	return &typeDBClusterClient{cc}
}

func (c *typeDBClusterClient) ServersAll(ctx context.Context, in *ServerManager_All_Req, opts ...grpc.CallOption) (*ServerManager_All_Res, error) {
	out := new(ServerManager_All_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/servers_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UsersContains(ctx context.Context, in *ClusterUserManager_Contains_Req, opts ...grpc.CallOption) (*ClusterUserManager_Contains_Res, error) {
	out := new(ClusterUserManager_Contains_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/users_contains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UsersCreate(ctx context.Context, in *ClusterUserManager_Create_Req, opts ...grpc.CallOption) (*ClusterUserManager_Create_Res, error) {
	out := new(ClusterUserManager_Create_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/users_create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UsersAll(ctx context.Context, in *ClusterUserManager_All_Req, opts ...grpc.CallOption) (*ClusterUserManager_All_Res, error) {
	out := new(ClusterUserManager_All_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/users_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UserPassword(ctx context.Context, in *ClusterUser_Password_Req, opts ...grpc.CallOption) (*ClusterUser_Password_Res, error) {
	out := new(ClusterUser_Password_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/user_password", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UserToken(ctx context.Context, in *ClusterUser_Token_Req, opts ...grpc.CallOption) (*ClusterUser_Token_Res, error) {
	out := new(ClusterUser_Token_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/user_token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) UserDelete(ctx context.Context, in *ClusterUser_Delete_Req, opts ...grpc.CallOption) (*ClusterUser_Delete_Res, error) {
	out := new(ClusterUser_Delete_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/user_delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) DatabasesGet(ctx context.Context, in *ClusterDatabaseManager_Get_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_Get_Res, error) {
	out := new(ClusterDatabaseManager_Get_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/databases_get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeDBClusterClient) DatabasesAll(ctx context.Context, in *ClusterDatabaseManager_All_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_All_Res, error) {
	out := new(ClusterDatabaseManager_All_Res)
	err := c.cc.Invoke(ctx, "/typedb.protocol.TypeDBCluster/databases_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypeDBClusterServer is the server API for TypeDBCluster service.
// All implementations must embed UnimplementedTypeDBClusterServer
// for forward compatibility
type TypeDBClusterServer interface {
	// Server Manager API
	ServersAll(context.Context, *ServerManager_All_Req) (*ServerManager_All_Res, error)
	// User Manager API
	UsersContains(context.Context, *ClusterUserManager_Contains_Req) (*ClusterUserManager_Contains_Res, error)
	UsersCreate(context.Context, *ClusterUserManager_Create_Req) (*ClusterUserManager_Create_Res, error)
	UsersAll(context.Context, *ClusterUserManager_All_Req) (*ClusterUserManager_All_Res, error)
	// User API
	UserPassword(context.Context, *ClusterUser_Password_Req) (*ClusterUser_Password_Res, error)
	UserToken(context.Context, *ClusterUser_Token_Req) (*ClusterUser_Token_Res, error)
	UserDelete(context.Context, *ClusterUser_Delete_Req) (*ClusterUser_Delete_Res, error)
	// Database Manager API
	DatabasesGet(context.Context, *ClusterDatabaseManager_Get_Req) (*ClusterDatabaseManager_Get_Res, error)
	DatabasesAll(context.Context, *ClusterDatabaseManager_All_Req) (*ClusterDatabaseManager_All_Res, error)
	mustEmbedUnimplementedTypeDBClusterServer()
}

// UnimplementedTypeDBClusterServer must be embedded to have forward compatible implementations.
type UnimplementedTypeDBClusterServer struct {
}

func (UnimplementedTypeDBClusterServer) ServersAll(context.Context, *ServerManager_All_Req) (*ServerManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersAll not implemented")
}
func (UnimplementedTypeDBClusterServer) UsersContains(context.Context, *ClusterUserManager_Contains_Req) (*ClusterUserManager_Contains_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersContains not implemented")
}
func (UnimplementedTypeDBClusterServer) UsersCreate(context.Context, *ClusterUserManager_Create_Req) (*ClusterUserManager_Create_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersCreate not implemented")
}
func (UnimplementedTypeDBClusterServer) UsersAll(context.Context, *ClusterUserManager_All_Req) (*ClusterUserManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersAll not implemented")
}
func (UnimplementedTypeDBClusterServer) UserPassword(context.Context, *ClusterUser_Password_Req) (*ClusterUser_Password_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPassword not implemented")
}
func (UnimplementedTypeDBClusterServer) UserToken(context.Context, *ClusterUser_Token_Req) (*ClusterUser_Token_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserToken not implemented")
}
func (UnimplementedTypeDBClusterServer) UserDelete(context.Context, *ClusterUser_Delete_Req) (*ClusterUser_Delete_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedTypeDBClusterServer) DatabasesGet(context.Context, *ClusterDatabaseManager_Get_Req) (*ClusterDatabaseManager_Get_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesGet not implemented")
}
func (UnimplementedTypeDBClusterServer) DatabasesAll(context.Context, *ClusterDatabaseManager_All_Req) (*ClusterDatabaseManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesAll not implemented")
}
func (UnimplementedTypeDBClusterServer) mustEmbedUnimplementedTypeDBClusterServer() {}

// UnsafeTypeDBClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TypeDBClusterServer will
// result in compilation errors.
type UnsafeTypeDBClusterServer interface {
	mustEmbedUnimplementedTypeDBClusterServer()
}

func RegisterTypeDBClusterServer(s grpc.ServiceRegistrar, srv TypeDBClusterServer) {
	s.RegisterService(&TypeDBCluster_ServiceDesc, srv)
}

func _TypeDBCluster_ServersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).ServersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/servers_all",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).ServersAll(ctx, req.(*ServerManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UsersContains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUserManager_Contains_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UsersContains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/users_contains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UsersContains(ctx, req.(*ClusterUserManager_Contains_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UsersCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUserManager_Create_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UsersCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/users_create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UsersCreate(ctx, req.(*ClusterUserManager_Create_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UsersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUserManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UsersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/users_all",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UsersAll(ctx, req.(*ClusterUserManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUser_Password_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/user_password",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UserPassword(ctx, req.(*ClusterUser_Password_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUser_Token_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/user_token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UserToken(ctx, req.(*ClusterUser_Token_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUser_Delete_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/user_delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).UserDelete(ctx, req.(*ClusterUser_Delete_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_DatabasesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDatabaseManager_Get_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).DatabasesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/databases_get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).DatabasesGet(ctx, req.(*ClusterDatabaseManager_Get_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypeDBCluster_DatabasesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDatabaseManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypeDBClusterServer).DatabasesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/typedb.protocol.TypeDBCluster/databases_all",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypeDBClusterServer).DatabasesAll(ctx, req.(*ClusterDatabaseManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// TypeDBCluster_ServiceDesc is the grpc.ServiceDesc for TypeDBCluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TypeDBCluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "typedb.protocol.TypeDBCluster",
	HandlerType: (*TypeDBClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "servers_all",
			Handler:    _TypeDBCluster_ServersAll_Handler,
		},
		{
			MethodName: "users_contains",
			Handler:    _TypeDBCluster_UsersContains_Handler,
		},
		{
			MethodName: "users_create",
			Handler:    _TypeDBCluster_UsersCreate_Handler,
		},
		{
			MethodName: "users_all",
			Handler:    _TypeDBCluster_UsersAll_Handler,
		},
		{
			MethodName: "user_password",
			Handler:    _TypeDBCluster_UserPassword_Handler,
		},
		{
			MethodName: "user_token",
			Handler:    _TypeDBCluster_UserToken_Handler,
		},
		{
			MethodName: "user_delete",
			Handler:    _TypeDBCluster_UserDelete_Handler,
		},
		{
			MethodName: "databases_get",
			Handler:    _TypeDBCluster_DatabasesGet_Handler,
		},
		{
			MethodName: "databases_all",
			Handler:    _TypeDBCluster_DatabasesAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/protobuf/cluster/cluster_service.proto",
}
