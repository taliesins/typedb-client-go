// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grakn_protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GraknClusterClient is the client API for GraknCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraknClusterClient interface {
	ServersAll(ctx context.Context, in *ServerManager_All_Req, opts ...grpc.CallOption) (*ServerManager_All_Res, error)
	DatabasesGet(ctx context.Context, in *ClusterDatabaseManager_Get_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_Get_Res, error)
	DatabasesAll(ctx context.Context, in *ClusterDatabaseManager_All_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_All_Res, error)
}

type graknClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewGraknClusterClient(cc grpc.ClientConnInterface) GraknClusterClient {
	return &graknClusterClient{cc}
}

func (c *graknClusterClient) ServersAll(ctx context.Context, in *ServerManager_All_Req, opts ...grpc.CallOption) (*ServerManager_All_Res, error) {
	out := new(ServerManager_All_Res)
	err := c.cc.Invoke(ctx, "/grakn.protocol.GraknCluster/servers_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graknClusterClient) DatabasesGet(ctx context.Context, in *ClusterDatabaseManager_Get_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_Get_Res, error) {
	out := new(ClusterDatabaseManager_Get_Res)
	err := c.cc.Invoke(ctx, "/grakn.protocol.GraknCluster/databases_get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graknClusterClient) DatabasesAll(ctx context.Context, in *ClusterDatabaseManager_All_Req, opts ...grpc.CallOption) (*ClusterDatabaseManager_All_Res, error) {
	out := new(ClusterDatabaseManager_All_Res)
	err := c.cc.Invoke(ctx, "/grakn.protocol.GraknCluster/databases_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraknClusterServer is the server API for GraknCluster service.
// All implementations must embed UnimplementedGraknClusterServer
// for forward compatibility
type GraknClusterServer interface {
	ServersAll(context.Context, *ServerManager_All_Req) (*ServerManager_All_Res, error)
	DatabasesGet(context.Context, *ClusterDatabaseManager_Get_Req) (*ClusterDatabaseManager_Get_Res, error)
	DatabasesAll(context.Context, *ClusterDatabaseManager_All_Req) (*ClusterDatabaseManager_All_Res, error)
	mustEmbedUnimplementedGraknClusterServer()
}

// UnimplementedGraknClusterServer must be embedded to have forward compatible implementations.
type UnimplementedGraknClusterServer struct {
}

func (UnimplementedGraknClusterServer) ServersAll(context.Context, *ServerManager_All_Req) (*ServerManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServersAll not implemented")
}
func (UnimplementedGraknClusterServer) DatabasesGet(context.Context, *ClusterDatabaseManager_Get_Req) (*ClusterDatabaseManager_Get_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesGet not implemented")
}
func (UnimplementedGraknClusterServer) DatabasesAll(context.Context, *ClusterDatabaseManager_All_Req) (*ClusterDatabaseManager_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabasesAll not implemented")
}
func (UnimplementedGraknClusterServer) mustEmbedUnimplementedGraknClusterServer() {}

// UnsafeGraknClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraknClusterServer will
// result in compilation errors.
type UnsafeGraknClusterServer interface {
	mustEmbedUnimplementedGraknClusterServer()
}

func RegisterGraknClusterServer(s grpc.ServiceRegistrar, srv GraknClusterServer) {
	s.RegisterService(&_GraknCluster_serviceDesc, srv)
}

func _GraknCluster_ServersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraknClusterServer).ServersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grakn.protocol.GraknCluster/servers_all",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraknClusterServer).ServersAll(ctx, req.(*ServerManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraknCluster_DatabasesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDatabaseManager_Get_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraknClusterServer).DatabasesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grakn.protocol.GraknCluster/databases_get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraknClusterServer).DatabasesGet(ctx, req.(*ClusterDatabaseManager_Get_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraknCluster_DatabasesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDatabaseManager_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraknClusterServer).DatabasesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grakn.protocol.GraknCluster/databases_all",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraknClusterServer).DatabasesAll(ctx, req.(*ClusterDatabaseManager_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraknCluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grakn.protocol.GraknCluster",
	HandlerType: (*GraknClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "servers_all",
			Handler:    _GraknCluster_ServersAll_Handler,
		},
		{
			MethodName: "databases_get",
			Handler:    _GraknCluster_DatabasesGet_Handler,
		},
		{
			MethodName: "databases_all",
			Handler:    _GraknCluster_DatabasesAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/protobuf/cluster/cluster_service.proto",
}
